# 1 ~ N까지 자연수 중 중복 없는 M자리 수 출력

# 모든 수를 탐색할 경우 O(N!)임 -> N이 8이므로 최대 8! -> 1억 미만임 -> 브루트 포스가 가능하다.
# 순서가 있는 문제, 선택하는 문제이므로 재귀함수로 브루트 포스 구현

# 바뀌는 것 -> 자릿수 (즉 위치가 바뀜) / 사용하지 못하는 수 (중복이 불가하기 때문이 이미 사용한 수가 바뀜)
# index를 바꿔 주며 다음 함수 호출
# 함수 구현 부분 : 해당하는 자릿수(index)를 입력 받아 어떤 수가 들어올 것인지 결정하는 함수
# 필요 상태 : 사용했는 지 체크하는 배열, 결정 지은 숫자들을 담는 배열
import sys

n, m = map(int, input().split())
c = [False] * (n + 1) # 0 빼고 N까지 수를 체크하기 위해 n + 1까지 배열 만듬(수를 index로 바로 사용)

a = [0] * m # 선택한 숫자를 담는 용도의 배열

def go(index, n, m):
    """각 자리수에 들어올 수를 결정하는 함수"""
    if index == m: # 종료조건, m개의 수를 다 선택한 경우
        sys.stdout.write(' '.join(map(str, a)) + '\n') # 출력할 게 많으므로
        return
    for i in range(1, n + 1): # 문제에서 주어진 N의 범위를 고려하여 탐색
        if c[i]: # 이미 사용한 수 경우
            continue
        # 사용하지 않은 경우
        c[i] = True # 사용으로 체크
        a[index] = i # index번째 자리 수를 i로 결정
        go(index + 1, n, m) # 다음 index 결정
        c[i] = False # 재귀 함수가 모두 종료되면 (m번재 숫자까지 다 결정한 경우) c를 초기화 하여 다음 수 탐색

go(0, n, m)